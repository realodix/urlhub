<?php

namespace Tests\Unit\Services;

use App\Models\Url;
use App\Services\KeyGeneratorService;
use Illuminate\Support\Facades\File;
use PHPUnit\Framework\Attributes as PHPUnit;
use Tests\TestCase;

#[PHPUnit\Group('services')]
class KeyGeneratorServiceTest extends TestCase
{
    private const RESOURCE_PREFIX = 'zzz';

    private KeyGeneratorService $keyGen;

    protected function setUp(): void
    {
        parent::setUp();

        $this->keyGen = app(KeyGeneratorService::class);
    }

    public function testGenerateUniqueString(): void
    {
        $value = 'foo';

        // Scenario 1
        $hash = $this->keyGen->generate($value);
        $this->assertSame($this->keyGen->shortHash($value), $hash);

        // Scenario 2
        // If the string is already used as a short link keyword
        Url::factory()->create(['keyword' => $hash]);
        $mock = $this->partialMock(KeyGeneratorService::class);
        $mock->shouldReceive([
            'shortHash' => $hash,
            'randomString' => 'mocked_random_string',
        ]);

        $this->assertSame('mocked_random_string', $mock->generate($value));
    }

    public function testGenerateUniqueStringWithReservedKeyword(): void
    {
        $reserved_keyword = 'foo';
        config(['urlhub.reserved_keyword' => [$reserved_keyword]]);

        $mock = $this->partialMock(KeyGeneratorService::class);
        $mock->shouldReceive([
            'shortHash' => $reserved_keyword,
            'randomString' => 'mocked_random_string',
        ]);

        $this->assertSame('mocked_random_string', $mock->generate($reserved_keyword));
    }

    /**
     * The length of the string generated by the generator is adjustable
     */
    public function testGeneratedKeyLengthMatchesConfiguration(): void
    {
        $inputString = 'foobar';
        $strLen = 8;
        settings()->fill(['key_len' => $strLen])->save();

        $actual = $this->keyGen->generate($inputString);
        $this->assertSame($strLen, strlen($actual));
        $this->assertNotSame(strlen($inputString), strlen($actual));
    }

    /**
     * The `verify` function should return `false` when the string is already
     * used as a short link keyword
     */
    public function testStringIsAlreadyInUse(): void
    {
        $standardKey = 'fOo';
        Url::factory()->create(['keyword' => $standardKey, 'is_custom' => false]);
        $this->assertFalse($this->keyGen->verify($standardKey));
        $this->assertTrue($this->keyGen->verify(strtoupper($standardKey)));
        $this->assertTrue($this->keyGen->verify(strtolower($standardKey)));

        $customeKey = 'bAr';
        Url::factory()->create(['keyword' => $customeKey, 'is_custom' => true]);
        $this->assertFalse($this->keyGen->verify($customeKey));
        $this->assertFalse($this->keyGen->verify(strtoupper($customeKey)));
        $this->assertFalse($this->keyGen->verify(strtolower($customeKey)));
    }

    /**
     * The `verify` function should return `false` when the string is in the
     * list of reserved keywords
     */
    public function testStringIsAReservedKeyword(): void
    {
        $value = 'foobar';

        config(['urlhub.reserved_keyword' => [$value]]);

        $this->assertFalse($this->keyGen->verify($value));
        $this->assertFalse($this->keyGen->verify(strtoupper($value)));
    }

    /**
     * The `verify` function should return `false` when the string is similar
     * to the route path name
     */
    public function testStringIsRegisteredRoute(): void
    {
        $route = collect($this->keyGen->routeCollisionList())
            ->first();

        $this->assertFalse($this->keyGen->verify($route));
        $this->assertFalse($this->keyGen->verify(strtoupper($route)));
    }

    /**
     * The `verify` function should return `false` when the string is a valid
     * directory name in the public directory
     */
    #[PHPUnit\Test]
    public function stringIsADirectoryInsideThePubicDirectory(): void
    {
        $value = self::RESOURCE_PREFIX.fake()->word();

        File::makeDirectory(public_path($value));
        $this->assertFalse($this->keyGen->verify($value));
        $this->assertFalse($this->keyGen->verify(strtoupper($value)));
    }

    /**
     * The `verify` function should return `false` when the string is a valid
     * file name in the public directory
     */
    #[PHPUnit\Test]
    public function stringIsAFileInsideThePublicDirectory(): void
    {
        $value = self::RESOURCE_PREFIX.fake()->word();

        File::put(public_path($value), '');
        $this->assertFalse($this->keyGen->verify($value));
        $this->assertFalse($this->keyGen->verify(strtoupper($value)));
    }

    /**
     * Menguji apakah fungsi reservedActiveKeyword mengembalikan nilai yang sesuai.
     *
     * reservedActiveKeyword mengembalikan keyword yang terdaftar sebagai reserved
     * keyword dan sudah digunakan sebagai custom keyword.
     *
     * Kondisi 1: Belum ada reserved keyword yang digunakan.
     * Kondisi 2: Ada beberapa reserved keyword yang sudah digunakan.
     */
    public function testReservedActiveKeyword()
    {
        // Test case 1: No reserved keywords already in use
        $this->assertEmpty($this->keyGen->reservedActiveKeyword()->all());

        // Test case 2: Some reserved keywords already in use
        $activeKeyword = self::RESOURCE_PREFIX.fake()->word();
        Url::factory()->create(['keyword' => $activeKeyword]);

        File::makeDirectory(public_path($activeKeyword));
        $this->assertEquals(
            $activeKeyword,
            $this->keyGen->reservedActiveKeyword()->implode(''),
        );
    }

    #[PHPUnit\Test]
    public function filterCollisionCandidates(): void
    {
        $actual = array_merge(
            [
                'css',
                'reset-password',

                '.',
                '..',
                '.htaccess',
                'favicon.ico',

                '+{url}',
                '/',
                '_debugbar',
                '_debugbar/assets/javascript',
                'admin/about',
                'admin/user/{user}/changepassword',
                'admin/links/u/{user}',
            ],
            config('urlhub.reserved_keyword'),
        );

        $expected = ['css', 'reset-password'];

        $this->assertEquals(
            $expected,
            $this->keyGen->filterCollisionCandidates($actual)->toArray(),
        );
    }

    #[PHPUnit\Test]
    public function totalKeywordSpaceUsed(): void
    {
        $keyLen = 3;

        settings()->fill(['key_len' => $keyLen])->save();
        Url::factory()->create(['keyword' => 'foo', 'is_custom' => false]); // 1
        Url::factory()->create(['keyword' => 'bar', 'is_custom' => true]); // 8
        $this->assertSame(9, $this->keyGen->totalKeywordSpaceUsed());

        // Character length does not meet criteria
        settings()->fill(['key_len' => $keyLen + 1])->save();
        $this->assertSame(0, $this->keyGen->totalKeywordSpaceUsed());
        settings()->fill(['key_len' => $keyLen - 1])->save();
        $this->assertSame(0, $this->keyGen->totalKeywordSpaceUsed());
    }

    #[PHPUnit\Test]
    public function standardKeywordSpaceUsed(): void
    {
        $keyLen = 3;

        settings()->fill(['key_len' => $keyLen])->save();
        Url::factory()->create(['keyword' => 'foo', 'is_custom' => false]);
        Url::factory()->create(['keyword' => 'bar', 'is_custom' => false]);
        $this->assertSame(2, $this->keyGen->standardKeywordSpaceUsed());

        // Character length does not meet criteria
        settings()->fill(['key_len' => $keyLen + 1])->save();
        $this->assertSame(0, $this->keyGen->standardKeywordSpaceUsed());
        settings()->fill(['key_len' => $keyLen - 1])->save();
        $this->assertSame(0, $this->keyGen->standardKeywordSpaceUsed());
    }

    #[PHPUnit\Test]
    public function customKeywordSpaceUsed(): void
    {
        $keyLen = 3;

        settings()->fill(['key_len' => $keyLen])->save();
        Url::factory()->create(['keyword' => 'abc', 'is_custom' => true]); // 8
        Url::factory()->create(['keyword' => 'a2c', 'is_custom' => true]); // 4
        Url::factory()->create(['keyword' => 'a-c', 'is_custom' => true]); // 4
        Url::factory()->create(['keyword' => 'a2-', 'is_custom' => true]); // 2
        Url::factory()->create(['keyword' => '-12', 'is_custom' => true]); // 1
        $this->assertSame(19, $this->keyGen->customKeywordSpaceUsed());

        // Character length does not meet criteria
        settings()->fill(['key_len' => $keyLen + 1])->save();
        $this->assertSame(0, $this->keyGen->customKeywordSpaceUsed());
        settings()->fill(['key_len' => $keyLen - 1])->save();
        $this->assertSame(0, $this->keyGen->customKeywordSpaceUsed());
    }

    #[PHPUnit\Test]
    #[PHPUnit\TestWith([1, 2, 0])]
    #[PHPUnit\TestWith([3, 2, 1])]
    #[PHPUnit\TestWith([100, 99, 1])]
    #[PHPUnit\TestWith([100, 20, 80])]
    #[PHPUnit\TestWith([100, 100, 0])]
    public function remainingCapacity($capacity, $used, $expected): void
    {
        $mock = $this->partialMock(KeyGeneratorService::class);
        $mock->shouldReceive([
            'capacity' => $capacity,
            'totalKeywordSpaceUsed' => $used,
        ]);
        $actual = $mock->remainingCapacity();

        $this->assertSame($expected, $actual);
    }

    /**
     * Test calculation of maximum unique strings based on key length.
     *
     * Verifies that `maxUniqueStrings` correctly calculates the total possible
     * combinations for a short key length and returns `PHP_INT_MAX` when the
     * calculation would exceed the maximum integer value (tested with a long
     * key length).
     */
    #[PHPUnit\Test]
    public function maxUniqueStrings(): void
    {
        $charLen = strlen($this->keyGen::ALPHABET);

        // Test case 1: Short key length
        settings()->fill(['key_len' => 2])->save();
        $this->assertSame(pow($charLen, 2), $this->keyGen->maxUniqueStrings());

        // Test case 2: Long key length
        settings()->fill(['key_len' => 12])->save();
        $this->assertSame(PHP_INT_MAX, $this->keyGen->maxUniqueStrings());
    }

    #[PHPUnit\Test]
    public function reservedKeywordSpaceUsed(): void
    {
        settings()->fill(['key_len' => 2])->save();

        $mock = $this->partialMock(KeyGeneratorService::class);
        $mock->shouldReceive([
            'routeCollisionList' => ['ab', 'foo'],
            'publicPathCollisionList' => ['cd', 'bar'],
        ]);
        $actual = $mock->reservedKeywordSpaceUsed();

        // (2^2) * 2
        $this->assertSame(8, $actual);
    }

    public function tearDown(): void
    {
        $resources = File::glob(public_path(self::RESOURCE_PREFIX.'*'));
        foreach ($resources as $resource) {
            File::deleteDirectory($resource);
            File::delete($resource);
        }

        parent::tearDown();
    }
}
